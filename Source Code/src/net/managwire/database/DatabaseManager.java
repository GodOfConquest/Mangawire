package net.managwire.database;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;

/**
 *
 * @author Thievery
 */
public class DatabaseManager {

    private File dbFolder = new File("testdb");
    private Connection connection = null;
    private Statement statement = null;

    public DatabaseManager() {
        try {
            if (!dbFolder.exists()) {
                Class.forName("org.hsqldb.jdbcDriver");
                connection = DriverManager.getConnection("jdbc:hsqldb:file:testdb/db", "sa", "");
                statement = connection.createStatement();
                initDatabase();
            } else {
                Class.forName("org.hsqldb.jdbcDriver");
                connection = DriverManager.getConnection("jdbc:hsqldb:file:testdb/db", "sa", "");
                statement = connection.createStatement();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            closeConnection();
        } catch (ClassNotFoundException e) {
            System.err.println("HSQLDB Driver not found");
            e.printStackTrace();
            closeConnection();
        }
    }

    /**
     * A one time call to intialize the database if it does not exsit
     */
    private void initDatabase() throws SQLException {
        statement.addBatch("CREATE TABLE LIBRARY("
                + "LibraryID int generated by default as identity"
                + "(START WITH 100, INCREMENT BY 1),MangaTitle varchar(70)not null,"
                + "AlbumPath varchar(32767) not null,Rating int,"
                + "Authour varchar(150) not null,mangaType varchar(150),"
                + "Constraint pk_LibraryID PRIMARY KEY(LibraryID))");
        statement.addBatch("CREATE TABLE Chapter("
                + "ChapterID int generated by default as identity"
                + "(START WITH 100, INCREMENT BY 1), LibraryID int not null,"
                + "ChapterNumber smallint not null, volume smallint not null,"
                + "page smallint not null, filePath varchar(250),"
                + "Constraint pk_ChapterID PRIMARY KEY (ChapterID),"
                + "Constraint fk_Library_chapter FOREIGN KEY(LibraryID) REFERENCES Library(LibraryID))");
        statement.addBatch("CREATE TABLE VirtualChapter("
                + "VChapterID int generated by default as identity"
                + "(START WITH 100, INCREMENT BY 1), LibraryID int not null,"
                + "ChapterNumber smallint not null, volume smallint not null,"
                + "numOfPages smallint not null,Constraint pk_VChapterID PRIMARY KEY (VChapterID),"
                + "Constraint fk_Library_vchapter FOREIGN KEY(LibraryID) REFERENCES Library(LibraryID))");
        statement.addBatch("CREATE TABLE Pages("
                + "PageID int generated by default as identity"
                + "(START WITH 100, INCREMENT BY 1), VChapterId int not null,"
                + "pageURL varchar(2083)not null, Constraint pk_pageID PRIMARY KEY (pageID),"
                + "Constraint fk_vchapter_page FOREIGN KEY(VChapterID) REFERENCES VirtualChapter(VChapterID))");
        statement.addBatch("CREATE TABLE Property("
                + " PropertyName varchar(25) not null,Value varchar(100) not null,"
                + " CONSTRAINT pk_PropertyName PRIMARY KEY(PropertyName));");
        statement.addBatch("INSERT INTO PROPERTY (PROPERTYNAME, VALUE) VALUES  ('LastSearch1', '')");
        statement.addBatch("INSERT INTO PROPERTY (PROPERTYNAME, VALUE) VALUES  ('LastSearch2', '')");
        statement.addBatch("INSERT INTO PROPERTY (PROPERTYNAME, VALUE) VALUES  ('LastSearch3', '')");
        statement.addBatch("INSERT INTO PROPERTY (PROPERTYNAME, VALUE) VALUES  ('LastSearch4', '')");
        statement.addBatch("INSERT INTO PROPERTY (PROPERTYNAME, VALUE) VALUES  ('LastSearch5', '')");
        statement.executeBatch();
    }

    public synchronized boolean addMangaToLibrary(String mangaTitle, String albumPath, int rating, String author, String mangaType) {
        ResultSet set = null;
        try {
            set = statement.executeQuery("SELECT * FROM LIBRARY WHERE MANGATITLE='" + mangaTitle + "'");
            if (!set.next()) {
                statement.executeUpdate("INSERT INTO LIBRARY (MANGATITLE, ALBUMPATH, RATING, AUTHOUR, MANGATYPE)"
                        + "VALUES ('" + mangaTitle + "', '" + albumPath + "', " + rating + ", '" + author + "', '" + mangaType + "')");
                return true;
            } else {
                return false;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            closeConnection();
            return false;
        } finally {
            if (set != null) {
                try {
                    set.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public synchronized boolean addChapterToLibrary(String mangaTitle, int chapterNumber, int volume, int page, String filePath) {
        ResultSet set = null;
        try {
            // Check if the manga exsists first and get the manga ID if it does exsisit
            //then add the chapter to the database with the given mangaID
            //if the manga does not exsist add the manga first and then try to add the chapter
            set = statement.executeQuery("SELECT * FROM LIBRARY WHERE MANGATITLE='" + mangaTitle + "'");
            if (set.next()) {
                int libraryId = set.getInt("LibraryId");
                statement.executeUpdate("INSERT INTO CHAPTER (LIBRARYID, CHAPTERNUMBER, VOLUME, PAGE, FILEPATH)"
                        + " VALUES (" + libraryId + " ," + chapterNumber + "," + volume + " ," + page + ", '" + filePath + "')");
                connection.commit();
                return true;
            } else {
                return false;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            if (set != null) {
                try {
                    set.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public synchronized boolean addVirtualChapterToLibrary(String mangaTitle, int chapterNumber, int volumeNumber, int numOfPages, LinkedList<String> pageUrl) {
        if (pageUrl.size() == 0) {
            return false;
        }
        ResultSet set = null;
        try {
            // Check if the manga exsists first and get the manga ID if it does exsisit
            //then add the chapter to the database with the given mangaID
            //if the manga does not exsist add the manga first and then try to add the chapter
            set = statement.executeQuery("SELECT * FROM LIBRARY WHERE MANGATITLE='" + mangaTitle + "'");
            if (set.next()) {
                connection.setAutoCommit(false);
                int libraryID = set.getInt("LibraryId");
                statement.executeUpdate("INSERT INTO VIRTUALCHAPTER(LIBRARYID, CHAPTERNUMBER, VOLUME, NUMOFPAGES)"
                        + "VALUES (" + libraryID + ", " + chapterNumber + ", " + volumeNumber + ", " + numOfPages + ")");
                set.close();
                set = statement.executeQuery("SELECT VCHAPTERID FROM VIRTUALCHAPTER WHERE LIBRARYID =" + libraryID + "and CHAPTERNUMBER = " + chapterNumber);
                if (set.next()) {
                    int vChapterID = set.getInt("VCHAPTERID");
                    for (int i = 0; i < pageUrl.size(); i++) {
                        statement.addBatch("INSERT INTO PAGES (VCHAPTERID, PAGEURL)"
                                + "VALUES (" + vChapterID + ", '" + pageUrl.get(i) + "')");
                    }
                    statement.executeBatch();
                    connection.commit();
                    connection.setAutoCommit(true);
                    return true;
                } else {
                    connection.rollback();
                    connection.setAutoCommit(true);
                    return false;
                }
            } else {
                return false;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            if (set != null) {
                try {
                    set.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public ResultSet getMangaFromLibrary(String SQLTitle) {
        ResultSet set = null;
        try {
            set = statement.executeQuery("SELECT * FROM LIBRARY WHERE MANGATITLE like '%" + SQLTitle.toLowerCase() + "%'");
            return set;
        } catch (SQLException e) {
            e.printStackTrace();
            return set;
        }
    }

    public ResultSet getAllMangasFromLibrary() {
        ResultSet set = null;
        try {
            set = statement.executeQuery("SELECT * FROM LIBRARY");
            return set;
        } catch (SQLException e) {
            e.printStackTrace();
            return set;
        }
    }

    public ResultSet getChaptersFromLibrary(String SQLTitle) {
        ResultSet set = null;
        try {
            set = statement.executeQuery("SELECT MANGATITLE, CHAPTERNUMBER, VOLUME ,PAGE,FILEPATH"
                    + "FROM LIBRARY INNER JOIN CHAPTER ON CHAPTER.LIBRARYID = LIBRARY.LIBRARYID"
                    + " WHERE LCASE(MANGATITLE) = '" + SQLTitle + "' ORDER BY CHAPTERNUMBER DESC");
            return set;
        } catch (SQLException e) {
            e.printStackTrace();
            return set;
        }
    }

    public ResultSet getVirtualChaptersFromLibrary(String SQLTitle) {
        ResultSet set = null;
        try {
            set = statement.executeQuery("SELECT MANGATITLE, CHAPTERNUMBER, VOLUME"
                    + "FROM LIBRARY INNER JOIN VIRTUALCHAPTER ON VIRTUALCHAPTER.LIBRARYID = LIBRARY.LIBRARYID"
                    + " WHERE LCASE(MANGATITLE) = '" + SQLTitle + "' ORDER BY CHAPTERNUMBER DESC");
            return set;
        } catch (SQLException e) {
            e.printStackTrace();
            return set;
        }

    }

    public String getProperty(String property) {
        try {
            statement.executeUpdate(property);
        } catch (SQLException e) {
            System.err.println("Could not get the property");
            e.printStackTrace();
            return null;
        }
        return null;
    }

    public void closeConnection() {
        try {
            statement.execute("SHUTDOWN");
            statement.close();
            connection.close();
        } catch (SQLException e) {
            System.err.println("Could not close the database connection");
        }
    }

    public static void main(String[] args) {
        DatabaseManager db = new DatabaseManager();
        db.addMangaToLibrary("Naruto", "C:/Album", 5, "Author", "Action");
        db.addMangaToLibrary("Claymore", "C:/Album", 5, "Author", "Action");
        db.addChapterToLibrary("Claymore", 7, 1, 19, "C:/MangaWire/");
        db.addVirtualChapterToLibrary("Claymore", 1, 1, 2, new LinkedList());
        db.closeConnection();
    }
}
